// tslint:disable
// eslint-disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * Message id
     * @type {string}
     * @memberof Message
     */
    readonly id?: string;
    /**
     * Session id the message belongs to
     * @type {string}
     * @memberof Message
     */
    sessionId: string;
    /**
     * Message content
     * @type {string}
     * @memberof Message
     */
    content: string;
    /**
     * Response text. Used only when responding
     * @type {Array<string>}
     * @memberof Message
     */
    readonly response?: Array<string>;
    /**
     * Hint text. Used only when responding
     * @type {string}
     * @memberof Message
     */
    readonly hint?: string;
    /**
     * List of quick responses. Used only when responding
     * @type {Array<string>}
     * @memberof Message
     */
    readonly quickResponses?: Array<string>;
    /**
     * Value how confident the bot was about the intent
     * @type {number}
     * @memberof Message
     */
    readonly confidence?: number;
    /**
     * source knot id id.
     * @type {string}
     * @memberof Message
     */
    readonly sourceKnotId?: string;
    /**
     * matched intent id. Null if intent not found
     * @type {string}
     * @memberof Message
     */
    readonly matchedIntentId?: string;
    /**
     * Creation time
     * @type {Date}
     * @memberof Message
     */
    readonly createdAt?: Date;
    /**
     * Last modification time
     * @type {Date}
     * @memberof Message
     */
    readonly modifiedAt?: Date;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'sessionId': json['sessionId'],
        'content': json['content'],
        'response': !exists(json, 'response') ? undefined : json['response'],
        'hint': !exists(json, 'hint') ? undefined : json['hint'],
        'quickResponses': !exists(json, 'quickResponses') ? undefined : json['quickResponses'],
        'confidence': !exists(json, 'confidence') ? undefined : json['confidence'],
        'sourceKnotId': !exists(json, 'sourceKnotId') ? undefined : json['sourceKnotId'],
        'matchedIntentId': !exists(json, 'matchedIntentId') ? undefined : json['matchedIntentId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sessionId': value.sessionId,
        'content': value.content,
    };
}


