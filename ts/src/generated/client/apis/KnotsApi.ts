// tslint:disable
// eslint-disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Knot,
    KnotFromJSON,
    KnotToJSON,
} from '../models';

export interface CreateKnotRequest {
    knot: Knot;
    storyId: string;
}

export interface DeleteKnotRequest {
    storyId: string;
    knotId: string;
}

export interface FindKnotRequest {
    storyId: string;
    knotId: string;
}

export interface ListKnotsRequest {
    storyId: string;
}

export interface UpdateKnotRequest {
    knot: Knot;
    storyId: string;
    knotId: string;
}

/**
 * no description
 */
export class KnotsApi extends runtime.BaseAPI {

    /**
     * Create story knot
     * Create a story knot
     */
    async createKnotRaw(requestParameters: CreateKnotRequest): Promise<runtime.ApiResponse<Knot>> {
        if (requestParameters.knot === null || requestParameters.knot === undefined) {
            throw new runtime.RequiredError('knot','Required parameter requestParameters.knot was null or undefined when calling createKnot.');
        }

        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling createKnot.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/knots`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KnotToJSON(requestParameters.knot),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KnotFromJSON(jsonValue));
    }

    /**
     * Create story knot
     * Create a story knot
     */
    async createKnot(requestParameters: CreateKnotRequest): Promise<Knot> {
        const response = await this.createKnotRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a knot
     * Delete knot
     */
    async deleteKnotRaw(requestParameters: DeleteKnotRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling deleteKnot.');
        }

        if (requestParameters.knotId === null || requestParameters.knotId === undefined) {
            throw new runtime.RequiredError('knotId','Required parameter requestParameters.knotId was null or undefined when calling deleteKnot.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/knots/{knotId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"knotId"}}`, encodeURIComponent(String(requestParameters.knotId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a knot
     * Delete knot
     */
    async deleteKnot(requestParameters: DeleteKnotRequest): Promise<void> {
        await this.deleteKnotRaw(requestParameters);
    }

    /**
     * Finds a story knot
     * Finds a story knot
     */
    async findKnotRaw(requestParameters: FindKnotRequest): Promise<runtime.ApiResponse<Knot>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling findKnot.');
        }

        if (requestParameters.knotId === null || requestParameters.knotId === undefined) {
            throw new runtime.RequiredError('knotId','Required parameter requestParameters.knotId was null or undefined when calling findKnot.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/knots/{knotId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"knotId"}}`, encodeURIComponent(String(requestParameters.knotId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KnotFromJSON(jsonValue));
    }

    /**
     * Finds a story knot
     * Finds a story knot
     */
    async findKnot(requestParameters: FindKnotRequest): Promise<Knot> {
        const response = await this.findKnotRaw(requestParameters);
        return await response.value();
    }

    /**
     * List story knots
     * List story knots
     */
    async listKnotsRaw(requestParameters: ListKnotsRequest): Promise<runtime.ApiResponse<Array<Knot>>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling listKnots.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/knots`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KnotFromJSON));
    }

    /**
     * List story knots
     * List story knots
     */
    async listKnots(requestParameters: ListKnotsRequest): Promise<Array<Knot>> {
        const response = await this.listKnotsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a knot
     * Updates knot
     */
    async updateKnotRaw(requestParameters: UpdateKnotRequest): Promise<runtime.ApiResponse<Knot>> {
        if (requestParameters.knot === null || requestParameters.knot === undefined) {
            throw new runtime.RequiredError('knot','Required parameter requestParameters.knot was null or undefined when calling updateKnot.');
        }

        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling updateKnot.');
        }

        if (requestParameters.knotId === null || requestParameters.knotId === undefined) {
            throw new runtime.RequiredError('knotId','Required parameter requestParameters.knotId was null or undefined when calling updateKnot.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/knots/{knotId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"knotId"}}`, encodeURIComponent(String(requestParameters.knotId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: KnotToJSON(requestParameters.knot),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KnotFromJSON(jsonValue));
    }

    /**
     * Updates a knot
     * Updates knot
     */
    async updateKnot(requestParameters: UpdateKnotRequest): Promise<Knot> {
        const response = await this.updateKnotRaw(requestParameters);
        return await response.value();
    }

}
