// tslint:disable
// eslint-disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Story,
    StoryFromJSON,
    StoryToJSON,
    Variable,
    VariableFromJSON,
    VariableToJSON,
} from '../models';

export interface CreateVariableRequest {
    variable: Variable;
    storyId: string;
}

export interface DeleteVariableRequest {
    storyId: string;
    variableId: string;
}

export interface FindVariableRequest {
    storyId: string;
    variableId: string;
}

export interface ListVariablesRequest {
    storyId: string;
}

export interface UpdateVariableRequest {
    variable: Variable;
    storyId: string;
    variableId: string;
}

/**
 * no description
 */
export class VariablesApi extends runtime.BaseAPI {

    /**
     * Create story variable
     * Create a story variable
     */
    async createVariableRaw(requestParameters: CreateVariableRequest): Promise<runtime.ApiResponse<Variable>> {
        if (requestParameters.variable === null || requestParameters.variable === undefined) {
            throw new runtime.RequiredError('variable','Required parameter requestParameters.variable was null or undefined when calling createVariable.');
        }

        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling createVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/variables`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VariableToJSON(requestParameters.variable),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VariableFromJSON(jsonValue));
    }

    /**
     * Create story variable
     * Create a story variable
     */
    async createVariable(requestParameters: CreateVariableRequest): Promise<Variable> {
        const response = await this.createVariableRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a variable
     * Delete variable
     */
    async deleteVariableRaw(requestParameters: DeleteVariableRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling deleteVariable.');
        }

        if (requestParameters.variableId === null || requestParameters.variableId === undefined) {
            throw new runtime.RequiredError('variableId','Required parameter requestParameters.variableId was null or undefined when calling deleteVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/variables/{variableId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"variableId"}}`, encodeURIComponent(String(requestParameters.variableId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a variable
     * Delete variable
     */
    async deleteVariable(requestParameters: DeleteVariableRequest): Promise<void> {
        await this.deleteVariableRaw(requestParameters);
    }

    /**
     * Finds a story variable
     * Finds a story variable
     */
    async findVariableRaw(requestParameters: FindVariableRequest): Promise<runtime.ApiResponse<Variable>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling findVariable.');
        }

        if (requestParameters.variableId === null || requestParameters.variableId === undefined) {
            throw new runtime.RequiredError('variableId','Required parameter requestParameters.variableId was null or undefined when calling findVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/variables/{variableId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"variableId"}}`, encodeURIComponent(String(requestParameters.variableId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VariableFromJSON(jsonValue));
    }

    /**
     * Finds a story variable
     * Finds a story variable
     */
    async findVariable(requestParameters: FindVariableRequest): Promise<Variable> {
        const response = await this.findVariableRaw(requestParameters);
        return await response.value();
    }

    /**
     * List story variables
     * List story variables
     */
    async listVariablesRaw(requestParameters: ListVariablesRequest): Promise<runtime.ApiResponse<Array<Variable>>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling listVariables.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/variables`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VariableFromJSON));
    }

    /**
     * List story variables
     * List story variables
     */
    async listVariables(requestParameters: ListVariablesRequest): Promise<Array<Variable>> {
        const response = await this.listVariablesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a variable
     * Updates variable
     */
    async updateVariableRaw(requestParameters: UpdateVariableRequest): Promise<runtime.ApiResponse<Story>> {
        if (requestParameters.variable === null || requestParameters.variable === undefined) {
            throw new runtime.RequiredError('variable','Required parameter requestParameters.variable was null or undefined when calling updateVariable.');
        }

        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling updateVariable.');
        }

        if (requestParameters.variableId === null || requestParameters.variableId === undefined) {
            throw new runtime.RequiredError('variableId','Required parameter requestParameters.variableId was null or undefined when calling updateVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/variables/{variableId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"variableId"}}`, encodeURIComponent(String(requestParameters.variableId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VariableToJSON(requestParameters.variable),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
    }

    /**
     * Updates a variable
     * Updates variable
     */
    async updateVariable(requestParameters: UpdateVariableRequest): Promise<Story> {
        const response = await this.updateVariableRaw(requestParameters);
        return await response.value();
    }

}
