// tslint:disable
// eslint-disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Session,
    SessionFromJSON,
    SessionToJSON,
} from '../models';

export interface CreateSessionRequest {
    session: Session;
    storyId: string;
}

/**
 * no description
 */
export class SessionsApi extends runtime.BaseAPI {

    /**
     * Creates new chat session
     * Creates new session
     */
    async createSessionRaw(requestParameters: CreateSessionRequest): Promise<runtime.ApiResponse<Session>> {
        if (requestParameters.session === null || requestParameters.session === undefined) {
            throw new runtime.RequiredError('session','Required parameter requestParameters.session was null or undefined when calling createSession.');
        }

        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling createSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/sessions`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionToJSON(requestParameters.session),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Creates new chat session
     * Creates new session
     */
    async createSession(requestParameters: CreateSessionRequest): Promise<Session> {
        const response = await this.createSessionRaw(requestParameters);
        return await response.value();
    }

}
