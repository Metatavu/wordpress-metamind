// tslint:disable
// eslint-disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Script,
    ScriptFromJSON,
    ScriptToJSON,
} from '../models';

export interface CreateScriptRequest {
    script: Script;
}

export interface DeleteScriptRequest {
    scriptId: string;
}

export interface FindScriptRequest {
    scriptId: string;
}

export interface UpdateScriptRequest {
    script: Script;
    scriptId: string;
}

/**
 * no description
 */
export class ScriptsApi extends runtime.BaseAPI {

    /**
     * Create script
     * Create a script
     */
    async createScriptRaw(requestParameters: CreateScriptRequest): Promise<runtime.ApiResponse<Script>> {
        if (requestParameters.script === null || requestParameters.script === undefined) {
            throw new runtime.RequiredError('script','Required parameter requestParameters.script was null or undefined when calling createScript.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scripts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScriptToJSON(requestParameters.script),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptFromJSON(jsonValue));
    }

    /**
     * Create script
     * Create a script
     */
    async createScript(requestParameters: CreateScriptRequest): Promise<Script> {
        const response = await this.createScriptRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a script
     * Delete script
     */
    async deleteScriptRaw(requestParameters: DeleteScriptRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scriptId === null || requestParameters.scriptId === undefined) {
            throw new runtime.RequiredError('scriptId','Required parameter requestParameters.scriptId was null or undefined when calling deleteScript.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scripts/{scriptId}`.replace(`{${"scriptId"}}`, encodeURIComponent(String(requestParameters.scriptId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a script
     * Delete script
     */
    async deleteScript(requestParameters: DeleteScriptRequest): Promise<void> {
        await this.deleteScriptRaw(requestParameters);
    }

    /**
     * Finds a script
     * Finds a script
     */
    async findScriptRaw(requestParameters: FindScriptRequest): Promise<runtime.ApiResponse<Script>> {
        if (requestParameters.scriptId === null || requestParameters.scriptId === undefined) {
            throw new runtime.RequiredError('scriptId','Required parameter requestParameters.scriptId was null or undefined when calling findScript.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scripts/{scriptId}`.replace(`{${"scriptId"}}`, encodeURIComponent(String(requestParameters.scriptId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptFromJSON(jsonValue));
    }

    /**
     * Finds a script
     * Finds a script
     */
    async findScript(requestParameters: FindScriptRequest): Promise<Script> {
        const response = await this.findScriptRaw(requestParameters);
        return await response.value();
    }

    /**
     * List scripts
     * List scripts
     */
    async listScriptsRaw(): Promise<runtime.ApiResponse<Array<Script>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scripts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScriptFromJSON));
    }

    /**
     * List scripts
     * List scripts
     */
    async listScripts(): Promise<Array<Script>> {
        const response = await this.listScriptsRaw();
        return await response.value();
    }

    /**
     * Updates a script
     * Updates script
     */
    async updateScriptRaw(requestParameters: UpdateScriptRequest): Promise<runtime.ApiResponse<Script>> {
        if (requestParameters.script === null || requestParameters.script === undefined) {
            throw new runtime.RequiredError('script','Required parameter requestParameters.script was null or undefined when calling updateScript.');
        }

        if (requestParameters.scriptId === null || requestParameters.scriptId === undefined) {
            throw new runtime.RequiredError('scriptId','Required parameter requestParameters.scriptId was null or undefined when calling updateScript.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scripts/{scriptId}`.replace(`{${"scriptId"}}`, encodeURIComponent(String(requestParameters.scriptId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ScriptToJSON(requestParameters.script),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptFromJSON(jsonValue));
    }

    /**
     * Updates a script
     * Updates script
     */
    async updateScript(requestParameters: UpdateScriptRequest): Promise<Script> {
        const response = await this.updateScriptRaw(requestParameters);
        return await response.value();
    }

}
