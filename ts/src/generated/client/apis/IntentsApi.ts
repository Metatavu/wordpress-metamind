// tslint:disable
// eslint-disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Intent,
    IntentFromJSON,
    IntentToJSON,
} from '../models';

export interface CreateIntentRequest {
    intent: Intent;
    storyId: string;
}

export interface DeleteIntentRequest {
    storyId: string;
    intentId: string;
}

export interface FindIntentRequest {
    storyId: string;
    intentId: string;
}

export interface ListIntentsRequest {
    storyId: string;
}

export interface UpdateIntentRequest {
    intent: Intent;
    storyId: string;
    intentId: string;
}

/**
 * no description
 */
export class IntentsApi extends runtime.BaseAPI {

    /**
     * Create story intent
     * Create a story intent
     */
    async createIntentRaw(requestParameters: CreateIntentRequest): Promise<runtime.ApiResponse<Intent>> {
        if (requestParameters.intent === null || requestParameters.intent === undefined) {
            throw new runtime.RequiredError('intent','Required parameter requestParameters.intent was null or undefined when calling createIntent.');
        }

        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling createIntent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/intents`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntentToJSON(requestParameters.intent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IntentFromJSON(jsonValue));
    }

    /**
     * Create story intent
     * Create a story intent
     */
    async createIntent(requestParameters: CreateIntentRequest): Promise<Intent> {
        const response = await this.createIntentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a intent
     * Delete intent
     */
    async deleteIntentRaw(requestParameters: DeleteIntentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling deleteIntent.');
        }

        if (requestParameters.intentId === null || requestParameters.intentId === undefined) {
            throw new runtime.RequiredError('intentId','Required parameter requestParameters.intentId was null or undefined when calling deleteIntent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/intents/{intentId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"intentId"}}`, encodeURIComponent(String(requestParameters.intentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a intent
     * Delete intent
     */
    async deleteIntent(requestParameters: DeleteIntentRequest): Promise<void> {
        await this.deleteIntentRaw(requestParameters);
    }

    /**
     * Finds a story intent
     * Finds a story intent
     */
    async findIntentRaw(requestParameters: FindIntentRequest): Promise<runtime.ApiResponse<Intent>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling findIntent.');
        }

        if (requestParameters.intentId === null || requestParameters.intentId === undefined) {
            throw new runtime.RequiredError('intentId','Required parameter requestParameters.intentId was null or undefined when calling findIntent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/intents/{intentId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"intentId"}}`, encodeURIComponent(String(requestParameters.intentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IntentFromJSON(jsonValue));
    }

    /**
     * Finds a story intent
     * Finds a story intent
     */
    async findIntent(requestParameters: FindIntentRequest): Promise<Intent> {
        const response = await this.findIntentRaw(requestParameters);
        return await response.value();
    }

    /**
     * List story intents
     * List story intents
     */
    async listIntentsRaw(requestParameters: ListIntentsRequest): Promise<runtime.ApiResponse<Array<Intent>>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling listIntents.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/intents`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntentFromJSON));
    }

    /**
     * List story intents
     * List story intents
     */
    async listIntents(requestParameters: ListIntentsRequest): Promise<Array<Intent>> {
        const response = await this.listIntentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a intent
     * Updates intent
     */
    async updateIntentRaw(requestParameters: UpdateIntentRequest): Promise<runtime.ApiResponse<Intent>> {
        if (requestParameters.intent === null || requestParameters.intent === undefined) {
            throw new runtime.RequiredError('intent','Required parameter requestParameters.intent was null or undefined when calling updateIntent.');
        }

        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling updateIntent.');
        }

        if (requestParameters.intentId === null || requestParameters.intentId === undefined) {
            throw new runtime.RequiredError('intentId','Required parameter requestParameters.intentId was null or undefined when calling updateIntent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}/intents/{intentId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))).replace(`{${"intentId"}}`, encodeURIComponent(String(requestParameters.intentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IntentToJSON(requestParameters.intent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IntentFromJSON(jsonValue));
    }

    /**
     * Updates a intent
     * Updates intent
     */
    async updateIntent(requestParameters: UpdateIntentRequest): Promise<Intent> {
        const response = await this.updateIntentRaw(requestParameters);
        return await response.value();
    }

}
