// tslint:disable
// eslint-disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Story,
    StoryFromJSON,
    StoryToJSON,
} from '../models';

export interface CreateStoryRequest {
    story: Story;
}

export interface DeleteStoryRequest {
    storyId: string;
}

export interface FindStoryRequest {
    storyId: string;
}

export interface UpdateStoryRequest {
    story: Story;
    storyId: string;
}

/**
 * no description
 */
export class StoriesApi extends runtime.BaseAPI {

    /**
     * Create story
     * Create a story
     */
    async createStoryRaw(requestParameters: CreateStoryRequest): Promise<runtime.ApiResponse<Story>> {
        if (requestParameters.story === null || requestParameters.story === undefined) {
            throw new runtime.RequiredError('story','Required parameter requestParameters.story was null or undefined when calling createStory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoryToJSON(requestParameters.story),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
    }

    /**
     * Create story
     * Create a story
     */
    async createStory(requestParameters: CreateStoryRequest): Promise<Story> {
        const response = await this.createStoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a story
     * Delete story
     */
    async deleteStoryRaw(requestParameters: DeleteStoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling deleteStory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a story
     * Delete story
     */
    async deleteStory(requestParameters: DeleteStoryRequest): Promise<void> {
        await this.deleteStoryRaw(requestParameters);
    }

    /**
     * Finds a story
     * Finds a story
     */
    async findStoryRaw(requestParameters: FindStoryRequest): Promise<runtime.ApiResponse<Story>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling findStory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
    }

    /**
     * Finds a story
     * Finds a story
     */
    async findStory(requestParameters: FindStoryRequest): Promise<Story> {
        const response = await this.findStoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * List stories
     * List stories
     */
    async listStoriesRaw(): Promise<runtime.ApiResponse<Array<Story>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoryFromJSON));
    }

    /**
     * List stories
     * List stories
     */
    async listStories(): Promise<Array<Story>> {
        const response = await this.listStoriesRaw();
        return await response.value();
    }

    /**
     * Updates a story
     * Updates story
     */
    async updateStoryRaw(requestParameters: UpdateStoryRequest): Promise<runtime.ApiResponse<Story>> {
        if (requestParameters.story === null || requestParameters.story === undefined) {
            throw new runtime.RequiredError('story','Required parameter requestParameters.story was null or undefined when calling updateStory.');
        }

        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling updateStory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{storyId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoryToJSON(requestParameters.story),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
    }

    /**
     * Updates a story
     * Updates story
     */
    async updateStory(requestParameters: UpdateStoryRequest): Promise<Story> {
        const response = await this.updateStoryRaw(requestParameters);
        return await response.value();
    }

}
