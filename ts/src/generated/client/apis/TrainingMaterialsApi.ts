// tslint:disable
// eslint-disable
/**
 * Metamind API
 * Brain spec for Metamind.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TrainingMaterial,
    TrainingMaterialFromJSON,
    TrainingMaterialToJSON,
    TrainingMaterialType,
    TrainingMaterialTypeFromJSON,
    TrainingMaterialTypeToJSON,
    TrainingMaterialVisibility,
    TrainingMaterialVisibilityFromJSON,
    TrainingMaterialVisibilityToJSON,
} from '../models';

export interface CreateTrainingMaterialRequest {
    trainingMaterial: TrainingMaterial;
}

export interface DeleteTrainingMaterialRequest {
    trainingMaterialId: string;
}

export interface FindTrainingMaterialRequest {
    trainingMaterialId: string;
}

export interface ListTrainingMaterialsRequest {
    storyId?: string;
    type?: TrainingMaterialType;
    visibility?: TrainingMaterialVisibility;
}

export interface UpdateTrainingMaterialRequest {
    trainingMaterial: TrainingMaterial;
    trainingMaterialId: string;
}

/**
 * no description
 */
export class TrainingMaterialsApi extends runtime.BaseAPI {

    /**
     * Create training material
     * Create a trainingMaterial
     */
    async createTrainingMaterialRaw(requestParameters: CreateTrainingMaterialRequest): Promise<runtime.ApiResponse<TrainingMaterial>> {
        if (requestParameters.trainingMaterial === null || requestParameters.trainingMaterial === undefined) {
            throw new runtime.RequiredError('trainingMaterial','Required parameter requestParameters.trainingMaterial was null or undefined when calling createTrainingMaterial.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trainingMaterials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrainingMaterialToJSON(requestParameters.trainingMaterial),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainingMaterialFromJSON(jsonValue));
    }

    /**
     * Create training material
     * Create a trainingMaterial
     */
    async createTrainingMaterial(requestParameters: CreateTrainingMaterialRequest): Promise<TrainingMaterial> {
        const response = await this.createTrainingMaterialRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a training material
     * Delete trainingMaterial
     */
    async deleteTrainingMaterialRaw(requestParameters: DeleteTrainingMaterialRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trainingMaterialId === null || requestParameters.trainingMaterialId === undefined) {
            throw new runtime.RequiredError('trainingMaterialId','Required parameter requestParameters.trainingMaterialId was null or undefined when calling deleteTrainingMaterial.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trainingMaterials/{trainingMaterialId}`.replace(`{${"trainingMaterialId"}}`, encodeURIComponent(String(requestParameters.trainingMaterialId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a training material
     * Delete trainingMaterial
     */
    async deleteTrainingMaterial(requestParameters: DeleteTrainingMaterialRequest): Promise<void> {
        await this.deleteTrainingMaterialRaw(requestParameters);
    }

    /**
     * Finds a training material
     * Finds a trainingMaterial
     */
    async findTrainingMaterialRaw(requestParameters: FindTrainingMaterialRequest): Promise<runtime.ApiResponse<TrainingMaterial>> {
        if (requestParameters.trainingMaterialId === null || requestParameters.trainingMaterialId === undefined) {
            throw new runtime.RequiredError('trainingMaterialId','Required parameter requestParameters.trainingMaterialId was null or undefined when calling findTrainingMaterial.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trainingMaterials/{trainingMaterialId}`.replace(`{${"trainingMaterialId"}}`, encodeURIComponent(String(requestParameters.trainingMaterialId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainingMaterialFromJSON(jsonValue));
    }

    /**
     * Finds a training material
     * Finds a trainingMaterial
     */
    async findTrainingMaterial(requestParameters: FindTrainingMaterialRequest): Promise<TrainingMaterial> {
        const response = await this.findTrainingMaterialRaw(requestParameters);
        return await response.value();
    }

    /**
     * List training materials
     * List trainingMaterials
     */
    async listTrainingMaterialsRaw(requestParameters: ListTrainingMaterialsRequest): Promise<runtime.ApiResponse<Array<TrainingMaterial>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.storyId !== undefined) {
            queryParameters['storyId'] = requestParameters.storyId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.visibility !== undefined) {
            queryParameters['visibility'] = requestParameters.visibility;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trainingMaterials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrainingMaterialFromJSON));
    }

    /**
     * List training materials
     * List trainingMaterials
     */
    async listTrainingMaterials(requestParameters: ListTrainingMaterialsRequest): Promise<Array<TrainingMaterial>> {
        const response = await this.listTrainingMaterialsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a training material
     * Updates trainingMaterial
     */
    async updateTrainingMaterialRaw(requestParameters: UpdateTrainingMaterialRequest): Promise<runtime.ApiResponse<TrainingMaterial>> {
        if (requestParameters.trainingMaterial === null || requestParameters.trainingMaterial === undefined) {
            throw new runtime.RequiredError('trainingMaterial','Required parameter requestParameters.trainingMaterial was null or undefined when calling updateTrainingMaterial.');
        }

        if (requestParameters.trainingMaterialId === null || requestParameters.trainingMaterialId === undefined) {
            throw new runtime.RequiredError('trainingMaterialId','Required parameter requestParameters.trainingMaterialId was null or undefined when calling updateTrainingMaterial.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trainingMaterials/{trainingMaterialId}`.replace(`{${"trainingMaterialId"}}`, encodeURIComponent(String(requestParameters.trainingMaterialId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrainingMaterialToJSON(requestParameters.trainingMaterial),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainingMaterialFromJSON(jsonValue));
    }

    /**
     * Updates a training material
     * Updates trainingMaterial
     */
    async updateTrainingMaterial(requestParameters: UpdateTrainingMaterialRequest): Promise<TrainingMaterial> {
        const response = await this.updateTrainingMaterialRaw(requestParameters);
        return await response.value();
    }

}
